name: Node.js CI/CD to AWS EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PORT: 3000
  AWS_REGION: 'ap-south-1'
  AWS_S3_BUCKET_NAME: 'honest-bite-be'
  ECR_REPOSITORY: honest-bite-backend

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v3
      id: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci
    
    - name: Type Check
      run: npx tsc --noEmit
    
    - name: Create env file
      run: |
        echo "PORT=${{ env.PORT }}" >> .env
        echo "USERNAME=${{ secrets.MONGODB_USERNAME }}" >> .env
        echo "PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
        echo "DB_URI=${{ secrets.MONGODB_URI }}" >> .env
        
        echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
        echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
        echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SMTP_SECURE=${{ secrets.SMTP_SECURE }}" >> .env
        echo "SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}" >> .env
        
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env
        echo "AWS_S3_BUCKET_NAME=${{ env.AWS_S3_BUCKET_NAME }}" >> .env
        
        echo "accessTokenPrivateKey=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}" >> .env
        echo "refreshTokenPrivateKey=${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}" >> .env
        echo "accessTokenPublicKey=${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}" >> .env
        echo "refreshTokenPublicKey=${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}" >> .env
    
    - name: Build Application
      run: npm run build
    
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          dist
          .next
        key: ${{ runner.os }}-build-${{ github.sha }}

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull latest image
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Create environment file on EC2
          cat > .env << EOL
          PORT=${{ env.PORT }}
          USERNAME=${{ secrets.MONGODB_USERNAME }}
          PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          DB_URI=${{ secrets.MONGODB_URI }}
          
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_SECURE=${{ secrets.SMTP_SECURE }}
          SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}
          
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ env.AWS_REGION }}
          AWS_S3_BUCKET_NAME=${{ env.AWS_S3_BUCKET_NAME }}
          
          accessTokenPrivateKey=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}
          refreshTokenPrivateKey=${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}
          accessTokenPublicKey=${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}
          refreshTokenPublicKey=${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}
          EOL
          
          # Stop existing container
          docker stop honest-bite-backend || true
          docker rm honest-bite-backend || true
          
          # Run new container
          docker run -d \
            --name honest-bite-backend \
            --restart always \
            -p 3000:3000 \
            --env-file .env \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Clean up old images
          docker system prune -f